# Generated by Django 5.1.6 on 2025-02-14 15:04

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models
from django.contrib.auth.models import Group, Permission



# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# tasks.migrations.0002_auto_20250212_0526
# tasks.migrations.0003_auto_20250212_1334

def change_archived_tasks(apps, schema_editor):
    # Get the task model from the apps registry
    # the app registry is used to ensure that your are working with correct version of your model
    Task = apps.get_model('tasks', 'Task')

    # update all 'Archived' tasks to 'Done'
    Task.objects.filter(status='ARCHIVED').update(status='DONE')

def create_groups(apps, schema_editor):

    # create 'Creator' group with 'add task' permisions
    creator_group = Group.objects.create(name='Creator')
    add_task_permission = Permission.objects.get(codename='add_task')
    creator_group.permissions.add(add_task_permission)


    # create "Editor" group with "change task" permission
    editor_group = Group.objects.create(name='Editor')
    change_task_permission = Permission.objects.get(codename='change_task')
    editor_group.permissions.add(change_task_permission)


    # create "Admin" group with "all" permission 
    admin_group = Group.objects.create(name='Admin')
    all_permissions = Permission.objects.filter(content_type__app_label='tasks')
    admin_group.permissions.set(all_permissions)



class Migration(migrations.Migration):

    replaces = [('tasks', '0001_initial'), ('tasks', '0002_auto_20250212_0526'), ('tasks', '0003_auto_20250212_1334'), ('tasks', '0004_alter_task_owner'), ('tasks', '0005_epic_task_epic_sprint'), ('tasks', '0006_sprint_end_date_after_start_date_task_check_status'), ('tasks', '0007_task_due_date_task_due_date_after_created_date')]

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, default='')),
                ('status', models.CharField(choices=[('UNASSIGNED', 'Unassigned'), ('IN_PROGRESS', 'In Progress'), ('DONE', 'Completed'), ('ARCHIVED', 'Archived')], db_comment='Can be Assigned, In Progress, Done, or Archived', default='UNASSIGNED', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_tasks', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(db_comment='Foreign key to the User who currently owns the task', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_tasks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table_comment': 'Hold Information about tasks',
            },
        ),
        migrations.RunPython(
            code=change_archived_tasks,
        ),
        migrations.RunPython(
            code=create_groups,
        ),
        migrations.AlterField(
            model_name='task',
            name='owner',
            field=models.ForeignKey(blank=True, db_comment='Foreign key to the User who currently owns the task', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owned_tasks', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Epic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_epics', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='task',
            name='epic',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tasks.epic'),
        ),
        migrations.CreateModel(
            name='Sprint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_sprints', to=settings.AUTH_USER_MODEL)),
                ('tasks', models.ManyToManyField(blank=True, related_name='sprints', to='tasks.task')),
            ],
            options={
                'constraints': [models.CheckConstraint(condition=models.Q(('end_date__gt', models.F('start_date'))), name='end_date_after_start_date')],
            },
        ),
        migrations.AddConstraint(
            model_name='task',
            constraint=models.CheckConstraint(condition=models.Q(('status__in', ['UNASSIGNED', 'IN_PROGRESS', 'DONE', 'ARCHIVED'])), name='check_status'),
        ),
        migrations.AddField(
            model_name='task',
            name='due_date',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddConstraint(
            model_name='task',
            constraint=models.CheckConstraint(condition=models.Q(('due_date__gte', models.F('created_at'))), name='due_date_after_created_date'),
        ),
    ]
